// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum TicketType {
  FREE
  PAID
  MIX
}

enum Category {
  ART
  BUSSINESS
  COMMUNITY
  EDUCATION
  FASHION
  FINANCE
  HEALTH
  MUSIC
  SOCIAL
  TECH
  OTHER
}

model Ticket {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  stock           Int     @default(1)
  description     String
  price           Int     @default(0)
  discountPercent Float     @default(0)
  discountActive  Boolean @default(false)
  Webinar         Webinar @relation(fields: [webinarId], references: [id], onDelete: Cascade)
  webinarId       String  @db.ObjectId
  Cart            Cart[]
}

model Seller {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime  @default(now())
  webinars  Webinar[]
}

model Webinar {
  id                 String     @id @default(auto()) @map("_id") @db.ObjectId
  coverImg           String
  type               TicketType
  name               String
  description        String
  startDate          DateTime
  endDate            DateTime
  registrationOpen   DateTime   @default(now())
  registrationClosed DateTime
  category           Category
  Tickets            Ticket[]
  seller             Seller     @relation(fields: [sellerId], references: [id])
  sellerId           String     @db.ObjectId
}

model User {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  email    String    @unique
  password Password?
  cart     Cart[]
}

model Cart {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  quantity Int

  Ticket   Ticket @relation(fields: [ticketId], references: [id])
  ticketId String
  User     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String @db.ObjectId

  @@unique([userId, ticketId])
}

model Password {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  hash   String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId
}
